// Complete binary tree
//   - A node can be Leaf node (no child), or has left child, or has left child and right child
//   - Parent node (i) has left child node (2*i+1), and right child node (2*i+2)
//   - Child node (i) has parent node (i-1)/2
//                0
//             /    \
//           1       2
//          /  \    /
//        3     4  5
//
//   - Consider an array as a complete binary tree.

//  Two different types of heap data structures. (as Complete binary tree)
//     - "大根堆" (dà gēn duī) is commonly translated as "max heap". In a max heap, the maximum element 
//       is always stored at the root of the heap (every sub tree).
//     - "小根堆" (xiǎo gēn duī) is commonly translated as "min heap". In a min heap, the minimum element 
//       is always stored at the root of the heap (every sub tree).

//  Example: 
//         Array { 3, 4, 5, 1, 2 } as Complete binary tree:
//                  3
//                /   \
//               4     5       Obviously this is not a max heap (大根堆)
//             /   \
//            1     2

//  Example: Change it to max heap (大根堆)
//      Array { 2, 1, 3, 6, 0, 4 } as Complete binary tree:
//         2       2        2             3             3                3               6
//               /        /   \  -->    /   \         /   \    -->     /   \   -->      /  \         ::::::;
//              1        1     3       1     2       1     2          6     2          3    2
//                     do swap with parent node     /                /                /
//                                                 6                1                1

1:30:00

